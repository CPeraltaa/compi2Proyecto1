/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,20],$V2=[1,25],$V3=[1,32],$V4=[1,15],$V5=[1,11],$V6=[1,12],$V7=[1,28],$V8=[1,27],$V9=[1,26],$Va=[1,29],$Vb=[1,13],$Vc=[1,24],$Vd=[1,30],$Ve=[1,31],$Vf=[5,14,15,16,29,30,47,48,68,69,70,71,81,90,99,100],$Vg=[1,36],$Vh=[1,37],$Vi=[1,42],$Vj=[11,18,33,45,79,80],$Vk=[2,134],$Vl=[1,54],$Vm=[11,18,33,42,43,45,79,80,84,85,86,87],$Vn=[1,55],$Vo=[1,56],$Vp=[11,18,31,33,42,43,45,79,80,84,85,86,87,88,90,91,93,94,97,98,101],$Vq=[1,57],$Vr=[11,18,33,42,43,45,79,80,84,85,86,87,88,90],$Vs=[1,58],$Vt=[1,59],$Vu=[11,16,18,31,33,42,43,45,79,80,84,85,86,87,88,90,91,93,94,97,98,101],$Vv=[11,18,33,42,43,45,79,80,84,85,86,87,88,90,91,93],$Vw=[1,63],$Vx=[11,18,33,42,43,45,79,80,84,85,86,87,88,90,91,93,94],$Vy=[11,18,33,42,43,45,79,80,84,85,86,87,88,90,91,93,94,97,98],$Vz=[11,33],$VA=[1,93],$VB=[1,95],$VC=[1,102],$VD=[2,5,14,15,16,21,29,30,47,48,55,56,57,61,63,64,66,68,69,70,71,72,73,74,81,90,99,100],$VE=[1,107],$VF=[1,108],$VG=[1,109],$VH=[1,110],$VI=[1,113],$VJ=[18,33],$VK=[11,16,18,31,33,42,43,44,45,79,80,84,85,86,87,88,90,91,93,94,97,98,101],$VL=[1,130],$VM=[11,18,19,21,31,33,43,44],$VN=[1,135],$VO=[1,156],$VP=[1,153],$VQ=[1,155],$VR=[1,157],$VS=[1,159],$VT=[1,158],$VU=[1,160],$VV=[1,161],$VW=[1,165],$VX=[1,164],$VY=[1,176],$VZ=[2,15,16,21,29,47,48,55,56,57,61,63,64,66,68,69,70,71,72,73,74,81,90,99,100],$V_=[1,208],$V$=[21,33],$V01=[1,240],$V11=[33,45],$V21=[1,261],$V31=[21,63,66],$V41=[1,292],$V51=[2,15,16,21,29,47,48,55,56,57,59,61,63,64,66,68,69,70,71,72,73,74,81,90,99,100];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"LINSTRUCCIONES":6,"INSTRUCCIONES":7,"FUNCION":8,"DEC_VARIABLE":9,"logi":10,"tPtcoma":11,"TYPESTRUCT":12,"ACCSATRI":13,"tfunction":14,"Identificador":15,"tPara":16,"LPRAMFUNC":17,"tParc":18,"tLlavea":19,"BODYFUN":20,"tLlavec":21,"tDosPts":22,"TYPEFUNCION":23,"TYPEVAR":24,"tVoid":25,"tBoolean":26,"tNumber":27,"tString":28,"tnull":29,"ttype":30,"tIgual":31,"LISTAVAR":32,"tComa":33,"LISTYPE":34,"PARAMFUNCION":35,"tTern":36,"LISTACOR":37,"LISTDECID":38,"TIPODEDECL":39,"VARIGUA":40,"Array":41,"tMenor":42,"tMayor":43,"tCorizq":44,"tCorder":45,"LISCOND":46,"tlet":47,"tconst":48,"INS_FUN":49,"CNIF_F":50,"WHILE_F":51,"SWITCH_F":52,"DO_F":53,"FOR_F":54,"ASIG_VARIABLE":55,"tReturn":56,"tif":57,"ELSEIF_F":58,"telse":59,"EI_F":60,"tswitch":61,"LCASE_F":62,"tdefault":63,"tBreak":64,"CASE_F":65,"tcase":66,"VALOP":67,"Cadena1":68,"Decimal":69,"Number":70,"Cadena2":71,"twhile":72,"tdo":73,"tfor":74,"FORCON":75,"tof":76,"tin":77,"CALLLlist":78,"tAnd":79,"tOr":80,"tNot":81,"condExpression":82,"sumres":83,"tMayoI":84,"tMenoI":85,"tIguaIg":86,"tNoIgu":87,"tMas":88,"multdiv":89,"tMenos":90,"tPor":91,"mod":92,"tDivision":93,"tMod":94,"ExprNeg":95,"Expressn":96,"tMasm":97,"tMenosm":98,"ttrue":99,"tfalse":100,"tPunto":101,"CALLS":102,"paramstr":103,"LISTACDOS":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"tPtcoma",14:"tfunction",15:"Identificador",16:"tPara",18:"tParc",19:"tLlavea",21:"tLlavec",22:"tDosPts",25:"tVoid",26:"tBoolean",27:"tNumber",28:"tString",29:"tnull",30:"ttype",31:"tIgual",33:"tComa",36:"tTern",41:"Array",42:"tMenor",43:"tMayor",44:"tCorizq",45:"tCorder",47:"tlet",48:"tconst",55:"ASIG_VARIABLE",56:"tReturn",57:"tif",59:"telse",61:"tswitch",63:"tdefault",64:"tBreak",66:"tcase",68:"Cadena1",69:"Decimal",70:"Number",71:"Cadena2",72:"twhile",73:"tdo",74:"tfor",76:"tof",77:"tin",79:"tAnd",80:"tOr",81:"tNot",84:"tMayoI",85:"tMenoI",86:"tIguaIg",87:"tNoIgu",88:"tMas",90:"tMenos",91:"tPor",93:"tDivision",94:"tMod",97:"tMasm",98:"tMenosm",99:"ttrue",100:"tfalse",101:"tPunto"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,2],[7,1],[7,2],[8,8],[8,10],[8,7],[8,9],[23,1],[23,1],[23,1],[24,1],[24,1],[24,1],[24,1],[12,7],[32,5],[32,3],[34,1],[34,1],[17,3],[17,1],[35,5],[35,4],[35,3],[35,5],[35,4],[35,3],[35,4],[35,4],[38,3],[38,1],[39,1],[39,3],[39,3],[39,5],[39,5],[39,3],[39,6],[39,6],[39,4],[39,4],[39,7],[39,7],[39,10],[39,10],[39,8],[39,8],[40,1],[40,3],[9,3],[9,7],[9,5],[46,3],[46,1],[37,3],[37,2],[20,2],[20,1],[49,1],[49,1],[49,1],[49,2],[49,1],[49,1],[49,1],[49,1],[49,2],[49,3],[49,2],[49,2],[50,12],[50,11],[50,8],[50,7],[58,2],[58,1],[60,8],[52,12],[52,10],[52,7],[62,2],[62,1],[65,6],[65,4],[67,0],[67,1],[67,1],[67,1],[67,1],[51,7],[53,9],[54,7],[75,8],[75,4],[75,4],[13,3],[10,3],[10,3],[10,2],[10,1],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,1],[83,3],[83,3],[83,1],[89,3],[89,3],[89,1],[92,3],[92,1],[95,2],[95,2],[95,1],[95,2],[96,3],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[78,3],[78,1],[102,4],[102,3],[102,2],[102,2],[102,1],[104,4],[104,3],[103,3],[103,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                            raiz.addNodo($$[$0-1]);
                        
break;
case 2: case 4: case 5: case 6: case 14: case 27: case 37: case 60: case 64: case 65: case 66: case 67: case 69: case 70: case 71: case 72: case 82: case 88: case 106: case 113: case 116: case 119: case 121: case 124:

                            this.$ = $$[$0];
                        
break;
case 3:

                            id = inc();
                            var temp = new NodoArbol("ListInstrucciones", id, null);
                            temp.addNodo($$[$0-1]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 15: case 16: case 92: case 93: case 94: case 95: case 127: case 128: case 129: case 130: case 131: case 132: case 133:

                            id = inc();
                            this.$ = new NodoArbol($$[$0].toString(), id, null);
                        
break;
case 17: case 18: case 19: case 20:

                            id = inc();
                            var temp = new NodoArbol($$[$0].toString(), id, null);
                            this.$ = temp;
                        
break;
case 22:

                        id = inc();
                        var temp = new NodoArbol("ListaVar", id, null);
                        id = inc();
                        var temp2 = new NodoArbol($$[$0-2].toString(), id, null);
                        $$[$0].addNodo(temp2);
                        temp.addNodo($$[$0-4]);
                        temp.addNodo($$[$0]);
                    
break;
case 23:

                        id = inc();
                        $$[$0].addNodo(new NodoArbol($$[$0-2].toString(), id, null));
                        this.$ = $$[$0];
                    
break;
case 24:

                    this.$ = $$[$0];
                
break;
case 25:

                    id = inc();
                    this.$ = new NodoArbol($$[$0].toString(), id, null);
                
break;
case 26:

                            id = inc();
                            var temp = new NodoArbol("ListParam", id, null);
                            temp.addNodo($$[$0-2]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 28: case 41:

                            id = inc();
                            var temp = new NodoArbol($$[$0-1].toString(), id, null);
                            id = inc();
                            $$[$0-2].addNodo(new NodoArbol($$[$0-4].toString(), id, null));
                            temp.addNodo($$[$0-2]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 29:

                            id = inc();                      
                            $$[$0].addNodo(new NodoArbol($$[$0-3].toString() + "?", id, null));
                            this.$ = $$[$0];
                        
break;
case 30:

                            id = inc();                      
                            $$[$0].addNodo(new NodoArbol($$[$0-2].toString(), id, null));
                            this.$ = $$[$0];
                        
break;
case 31: case 42:

                            id = inc();
                            var temp = new NodoArbol($$[$0-1].toString(), id, null);
                            id = inc();
                            var temp2 = new NodoArbol($$[$0-2].toString(), id, null);
                            id = inc();
                            temp2.addNodo(new NodoArbol($$[$0-4].toString(), id, null));
                            temp.addNodo(temp2);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 32:

                            id = inc();
                            var temp = new NodoArbol($$[$0-1].toString(), id, null);
                            id = inc();                         
                            temp.addNodo(new NodoArbol($$[$0-3].toString() + "?", id, null));
                            this.$ = temp;
                        
break;
case 33: case 40:

                            id = inc();
                            var temp = new NodoArbol($$[$0].toString(), id, null);
                            id = inc();                         
                            temp.addNodo(new NodoArbol($$[$0-2].toString(), id, null));
                            this.$ = temp;
                        
break;
case 34: case 46:

                            id = inc();
                            $$[$0-1].addNodo(new NodoArbol($$[$0-3].toString() + "[]", id, null));
                            this.$ = $$[$0-1];
                        
break;
case 35: case 47:

                            id = inc();
                            var temp = new NodoArbol($$[$0-1].toString(), id, null);
                            id = inc();
                            temp.addNodo(new NodoArbol($$[$0-3].toString() + "[]", id, null));
                            this.$ = temp;
                        
break;
case 36:

                            id = inc();
                            var temp = new NodoArbol("ListID", id, null);
                            temp.addNodo($$[$0-2]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 38:

                            id = inc();
                            var temp = new NodoArbol("Any", id, null);
                            id = inc();
                            temp.addNodo(new NodoArbol($$[$0].toString(), id, null));
                            this.$ = temp;                   
                        
break;
case 39:
                                                      
                            id = inc();                      
                            $$[$0].addNodo(new NodoArbol($$[$0-2].toString(), id, null));
                            this.$ = $$[$0];
                        
break;
case 43:

                            id = inc();
                            var temp = new NodoArbol($$[$0-1].toString(), id, null);
                            id = inc();
                            var temp2 = new NodoArbol("Any", id, null);
                            id = inc();
                            temp2.addNodo(new NodoArbol($$[$0-2].toString(), id, null));
                            temp.addNodo(temp2);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 44:

                            id = inc();
                            var temp = new NodoArbol($$[$0-3].toString(), id, null);
                            id = inc();
                            $$[$0-1].addNodo(new NodoArbol($$[$0-5].toString(), id, null));
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 45:

                            id = inc();
                            var temp = new NodoArbol($$[$0-3].toString(), id, null);
                            id = inc();
                            var temp2 = new NodoArbol($$[$0-1].toString(), id, null);
                            id = inc();
                            temp2.addNodo(new NodoArbol($$[$0-5].toString(), id, null));
                            temp.addNodo(temp2);
                            this.$ = temp;
                        
break;
case 48:

                            id = inc();
                            $$[$0-4].addNodo(new NodoArbol($$[$0-6].toString() + "[]", id, null));
                            this.$ = $$[$0-4];
                        
break;
case 49:

                            id = inc();
                            var temp = new NodoArbol($$[$0-4].toString(), id, null);
                            id = inc();
                            temp.addNodo(new NodoArbol($$[$0-6].toString() + "[]", id, null));
                            this.$ = temp;
                        
break;
case 50:

                            id = inc();
                            var temp = new NodoArbol($$[$0-3].toString(), id, null);
                            id = inc();
                            $$[$0-5].addNodo(new NodoArbol($$[$0-9].toString() + "[]", id, null));
                            temp.addNodo($$[$0-5]);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 51:

                            id = inc();
                            var temp = new NodoArbol($$[$0-3].toString(), id, null);
                            id = inc();
                            var temp2 = new NodoArbol($$[$0-5].toString(), id, null);
                            id = inc();
                            temp2.addNodo($$[$0-9].toString() + "[]", id, null);
                            temp.addNodo(temp2);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 52:

                            id = inc();
                            var temp = new NodoArbol($$[$0-3].toString(), id, null);
                            id = inc();
                            $$[$0-5].addNodo(new NodoArbol($$[$0-7].toString() + "[]", id, null));
                            temp.addNodo($$[$0-5]);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 53:

                            id = inc();
                            var temp = new NodoArbol($$[$0-3].toString(), id, null);
                            id = inc();
                            var temp2 = new NodoArbol($$[$0-5].toString(), id, null);
                            id = inc();
                            temp2.addNodo(new NodoArbol($$[$0-7].toString() + "[]", id, null));
                            temp.addNodo(temp2);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 54:

                this.$ = $$[$0];
            
break;
case 55:

                this.$ = $$[$0-1];
            
break;
case 56:

                            id = inc();
                            var temp = new NodoArbol($$[$0-2].toString(), id, null);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 57:

                            id = inc();
                            var temp = new NodoArbol($$[$0-6].toString(), id, null);
                            id = inc();
                            var temp2 = new NodoArbol($$[$0-2].toString(), id, null);
                            id = inc();
                            $$[$0-3].addNodo(new NodoArbol($$[$0-5].toString(), id, null));
                            temp2.addNodo($$[$0-3]);
                            temp2.addNodo($$[$0-1]);
                            temp.addNodo(temp2);
                            this.$ = temp;
                        
break;
case 58:

                            id = inc();
                            var temp = new NodoArbol($$[$0-4].toString(), id, null);
                            id = inc();
                            var temp2 = new NodoArbol($$[$0-2].toString(), id, null);
                            id = inc();
                            var temp3 = new NodoArbol("Any", id, null);
                            id = inc();
                            temp3.addNodo(new NodoArbol($$[$0-3].toString(), id, null));
                            temp2.addNodo(temp3);
                            temp2.addNodo($$[$0-1]);
                            temp.addNodo(temp2);
                            this.$ = temp;
                        
break;
case 59:

                            id = inc();
                            var temp = new NodoArbol("ListLogi", id, null);
                            temp.addNodo($$[$0-2]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 63:

                            id = inc();
                            var temp = new NodoArbol("ListInsFunc", id, null);
                            temp.addNodo($$[$0-1]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 68: case 73:

                            this.$ = $$[$0-1];
                        
break;
case 77:

                            id = inc();
                            var temp = new NodoArbol($$[$0-11].toString(), id, null);
                            temp.addNodo($$[$0-9]);
                            temp.addNodo($$[$0-6]);
                            temp.addNodo($$[$0-4]);
                            id = inc();
                            var temp2 = new NodoArbol($$[$0-3].toString(), id, null);
                            temp2.addNodo($$[$0-1]);
                            temp.addNodo(temp2);
                            this.$ = temp;
                        
break;
case 78:

                            id = inc();
                            var temp = new NodoArbol($$[$0-10].toString(), id, null);
                            id = inc();
                            var temp2 = new NodoArbol($$[$0-3].toString(), id, null);
                            temp2.addNodo($$[$0-1]);
                            temp.addNodo($$[$0-8]);
                            temp.addNodo($$[$0-5]);
                            temp.addNodo(temp2);
                            this.$ = temp;
                        
break;
case 79:

                            id = inc();
                            var temp = new NodoArbol($$[$0-7].toString(), id, null);
                            temp.addNodo($$[$0-5]);
                            temp.addNodo($$[$0-2]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 80:

                            id = inc();
                            var temp = new NodoArbol($$[$0-6].toString(), id, null);
                            temp.addNodo($$[$0-4]);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 81:

                            id = inc();
                            var temp = new NodoArbol("ListElseIf", id, null);
                            temp.addNodo($$[$0-1]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 83:

                            id = inc();
                            var temp = new NodoArbol("else if", id, null);
                            temp.addNodo($$[$0-4]);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 84:

                            id = inc();
                            var temp = new NodoArbol("SWITCH", id, null);
                            id = inc();
                            var temp2 = new NodoArbol("DEFAULT", id, null);
                            temp2.addNodo($$[$0-3]);
                            id = inc();
                            temp2.addNodo(new NodoArbol("BREAK", id, null));
                            temp.addNodo($$[$0-9]);
                            temp.addNodo($$[$0-6]);
                            temp.addNodo(temp2);
                            this.$ = temp;
                        
break;
case 85:

                            id = inc();
                            var temp = new NodoArbol("SWITCH", id, null);
                            id = inc();
                            var temp2 = new NodoArbol("DEFAULT", id, null);
                            temp2.addNodo($$[$0-1]);
                            temp.addNodo($$[$0-7]);
                            temp.addNodo($$[$0-4]);
                            temp.addNodo(temp2);
                            this.$ = temp;
                        
break;
case 86:

                            id = inc();
                            var temp = new NodoArbol("SWITCH", id, null);
                            temp.addNodo($$[$0-4]);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 87:

                            id = inc();
                            var temp = new NodoArbol("ListCase", id, null);
                            temp.addNodo($$[$0-1]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 89:

                            id = inc();
                            var temp = new NodoArbol($$[$0-5].toString(), id, null);
                            temp.addNodo($$[$0-4]);
                            temp.addNodo($$[$0-2]);
                            id = inc();
                            temp.addNodo(new NodoArbol($$[$0-1].toString(), id, null));
                            this.$ = temp;
                        
break;
case 90:

                            id = inc();
                            var temp = new NodoArbol($$[$0-3].toString(), id, null);
                            temp.addNodo($$[$0-2]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 96:

                            id = inc();
                            var temp = new NodoArbol("WHILE", id, null);
                            temp.addNodo($$[$0-4]);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 97:

                            id = inc();
                            var temp = new NodoArbol("DO WHILE", id, null);
                            temp.addNodo($$[$0-6]);
                            temp.addNodo($$[$0-2]);
                            this.$ = temp;
                        
break;
case 98:

                            id = inc();
                            var temp = new NodoArbol("FOR", id, null);
                            temp.addNodo($$[$0-4]);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 99:

                            id = inc();
                            var temp = new NodoArbol("FOR COND", id, null);
                            id = inc();
                            var temp2 = new NodoArbol("Any", id, null);
                            id = inc();
                            temp2.addNodo(new NodoArbol($$[$0-6].toString(), id, null));
                            id = inc();
                            var temp3 = new NodoArbol($$[$0-5].toString(), id, null);
                            temp3.addNodo(temp2);
                            temp3.addNodo($$[$0-4]);
                            temp.addNodo(temp3);
                            temp.addNodo($$[$0-2]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;

                        
break;
case 100:

                            id = inc();
                            var temp = new NodoArbol("OF", id, null);
                            id = inc();
                            var temp2 = new NodoArbol("Any", id, null);
                            id = inc();
                            temp2.addNodo(new NodoArbol($$[$0-2].toString(), id, null));
                            id = inc();
                            var temp3 = new NodoArbol($$[$0].toString(), id, null);
                            temp.addNodo(temp2);
                            temp.addNodo(temp3);
                            this.$ = temp;
                        
break;
case 101:

                            id = inc();
                            var temp = new NodoArbol("IN", id, null);
                            id = inc();
                            var temp2 = new NodoArbol("Any", id, null);
                            id = inc();
                            temp2.addNodo(new NodoArbol($$[$0-2].toString(), id, null));
                            id = inc();
                            var temp3 = new NodoArbol($$[$0].toString(), id, null);
                            temp.addNodo(temp2);
                            temp.addNodo(temp3);
                            this.$ = temp;
                        
break;
case 103: case 104: case 107: case 108: case 109: case 110: case 111: case 112: case 114: case 115: case 117: case 118: case 120:

                            id = inc();
                            var temp = new NodoArbol($$[$0-1].toString(), id, null);
                            temp.addNodo($$[$0-2]);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 105:

                            id = inc();
                            var temp = new NodoArbol($$[$0-1].toString(), id, null);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 122: case 123:

                            id = inc();
                            var temp = new NodoArbol($$[$0].toString(), id, null);
                            temp.addNodo($$[$0-1]);
                            this.$ = temp;
                        
break;
case 125:
     
                            id = inc();
                            var temp = new NodoArbol($$[$0-1].toString(), id, null);
                            temp.addNodo($$[$0]);
                            this.$ = temp;
                        
break;
case 126:

                            this.$ = $$[$0-2];                           
                        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:$V0,15:$V1,16:$V2,29:$V3,30:$V4,47:$V5,48:$V6,68:$V7,69:$V8,70:$V9,71:$Va,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{1:[3]},{5:[1,33]},{5:[2,2],7:34,8:5,9:6,10:7,12:8,13:9,14:$V0,15:$V1,16:$V2,29:$V3,30:$V4,47:$V5,48:$V6,68:$V7,69:$V8,70:$V9,71:$Va,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),{11:[1,35],79:$Vg,80:$Vh},o($Vf,[2,8]),{11:[1,38]},{15:[1,39]},{15:$Vi,38:40,39:41},{15:[1,43]},{10:44,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vj,[2,106],{42:[1,47],43:[1,46],84:[1,48],85:[1,49],86:[1,50],87:[1,51]}),{15:[1,52]},o([11,42,43,79,80,84,85,86,87,88,90,91,93,94,97,98],$Vk,{31:[1,53],101:$Vl}),o($Vm,[2,113],{88:$Vn,90:$Vo}),o($Vp,[2,136],{16:$Vq}),o($Vr,[2,116],{91:$Vs,93:$Vt}),o($Vu,[2,141],{37:60,104:61,44:[1,62]}),o($Vv,[2,119],{94:$Vw}),o($Vx,[2,121]),o($Vx,[2,124],{97:[1,64],98:[1,65]}),{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,96:66,99:$Vd,100:$Ve,102:18},{10:67,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vy,[2,127]),o($Vy,[2,128]),o($Vy,[2,129]),o($Vy,[2,130]),o($Vy,[2,131]),o($Vy,[2,132]),o($Vy,[2,133]),{1:[2,1]},o($Vf,[2,3]),o($Vf,[2,7]),{10:68,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{10:69,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vf,[2,9]),{16:[1,70]},{11:[1,71],33:[1,72]},o($Vz,[2,37]),o($Vz,[2,38],{22:[1,73],31:[1,74]}),{22:[1,75],31:[1,76]},o($Vj,[2,105]),o($Vy,$Vk,{101:$Vl}),{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,83:77,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,83:78,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,83:79,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,83:80,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,83:81,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,83:82,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{31:[1,83]},{10:84,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$V1,102:85},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,89:86,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,89:87,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{10:90,15:$V1,16:$V2,18:[1,89],29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18,103:88},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,90:$Vc,92:91,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,90:$Vc,92:92,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vu,[2,139],{44:$VA}),o($Vu,[2,140],{44:[1,94]}),{10:96,15:$V1,16:$V2,29:$V3,45:$VB,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,90:$Vc,95:97,96:23,99:$Vd,100:$Ve,102:18},o($Vx,[2,122]),o($Vx,[2,123]),o($Vx,[2,125]),{18:[1,98],79:$Vg,80:$Vh},o([11,18,33,45,79],[2,103],{80:$Vh}),o($Vj,[2,104]),{15:$VC,17:99,18:[1,100],35:101},o($VD,[2,56]),{15:$Vi,39:103},{15:[1,105],24:104,26:$VE,27:$VF,28:$VG,29:$VH,41:[1,106]},{10:112,15:$V1,16:$V2,19:$VI,29:$V3,40:111,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{24:114,26:$VE,27:$VF,28:$VG,29:$VH},{10:115,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vm,[2,107],{88:$Vn,90:$Vo}),o($Vm,[2,108],{88:$Vn,90:$Vo}),o($Vm,[2,109],{88:$Vn,90:$Vo}),o($Vm,[2,110],{88:$Vn,90:$Vo}),o($Vm,[2,111],{88:$Vn,90:$Vo}),o($Vm,[2,112],{88:$Vn,90:$Vo}),{19:[1,116]},{11:[2,102],79:$Vg,80:$Vh},o($Vp,[2,135],{16:$Vq}),o($Vr,[2,114],{91:$Vs,93:$Vt}),o($Vr,[2,115],{91:$Vs,93:$Vt}),{18:[1,117],33:[1,118]},o($Vu,[2,138]),o($VJ,[2,145],{79:$Vg,80:$Vh}),o($Vv,[2,117],{94:$Vw}),o($Vv,[2,118],{94:$Vw}),{45:[1,119]},{10:120,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VK,[2,62]),{45:[1,121],79:$Vg,80:$Vh},o($Vx,[2,120]),o($Vy,[2,126]),{18:[1,122],33:[1,123]},{19:[1,124],22:[1,125]},o($VJ,[2,27]),{22:[1,126],36:[1,127]},o($Vz,[2,36]),o($Vz,[2,39],{37:129,31:[1,128],44:$VL}),o($Vz,[2,40],{37:132,31:[1,131],44:$VL}),{42:[1,133]},o($VM,[2,17]),o($VM,[2,18]),o($VM,[2,19]),o($VM,[2,20]),o($Vz,[2,43]),o($Vz,[2,54],{79:$Vg,80:$Vh}),{15:$VN,32:134},{31:[1,136]},{11:[1,137],79:$Vg,80:$Vh},{15:$VN,32:138},o($Vu,[2,137]),{10:139,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VK,[2,61]),{45:[1,140],79:$Vg,80:$Vh},o($VK,[2,143]),{19:[1,141],22:[1,142]},{15:$VC,35:143},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:144,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$VW,23:162,24:163,25:$VX,26:$VE,27:$VF,28:$VG,29:$VH},{15:[1,167],24:166,26:$VE,27:$VF,28:$VG,29:$VH},{22:[1,168]},{10:112,15:$V1,16:$V2,19:$VI,29:$V3,40:169,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vz,[2,46],{31:[1,170],44:$VA}),{45:$VB},{10:112,15:$V1,16:$V2,19:$VI,29:$V3,40:171,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vz,[2,47],{31:[1,172],44:$VA}),{15:[1,174],24:173,26:$VE,27:$VF,28:$VG,29:$VH},{21:[1,175],33:$VY},{22:[1,177]},{10:178,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VD,[2,58]),{21:[1,179],33:$VY},o($VJ,[2,144],{79:$Vg,80:$Vh}),o($VK,[2,142]),{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:180,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:$VW,23:181,24:163,25:$VX,26:$VE,27:$VF,28:$VG,29:$VH},o($VJ,[2,26]),{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,182],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VZ,[2,64]),o($VZ,[2,65]),o($VZ,[2,66]),o($VZ,[2,67]),{11:[1,184]},o($VZ,[2,69]),o($VZ,[2,70]),o($VZ,[2,71]),o($VZ,[2,72]),{11:[1,185],79:$Vg,80:$Vh},{10:186,11:[1,187],15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{11:[1,188]},{16:[1,189]},{16:[1,190]},{16:[1,191]},{19:[1,192]},{16:[1,193]},{19:[1,194]},{19:[2,14]},{19:[2,15]},{19:[2,16]},o($VJ,[2,30],{37:196,31:[1,195],44:$VL}),o($VJ,[2,33],{37:198,31:[1,197],44:$VL}),{15:[1,200],24:199,26:$VE,27:$VF,28:$VG,29:$VH},o($Vz,[2,41]),{44:[1,201]},o($Vz,[2,42]),{44:[1,202]},{43:[1,203]},{43:[1,204]},o($Vz,[2,55]),{15:[1,205]},{15:$V_,24:207,26:$VE,27:$VF,28:$VG,29:$VH,34:206},{11:[1,209],79:$Vg,80:$Vh},{11:[1,210]},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,211],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{19:[1,212]},o($Vf,[2,12]),o($VZ,[2,63]),o($VZ,[2,68]),o($VZ,[2,73]),{11:[1,213],79:$Vg,80:$Vh},o($VZ,[2,75]),o($VZ,[2,76]),{10:214,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{10:215,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{10:216,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:217,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{47:[1,219],75:218},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:220,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{10:221,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VJ,[2,34],{44:$VA}),{10:222,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VJ,[2,35],{44:$VA}),o($VJ,[2,29]),o($VJ,[2,32]),{10:225,15:$V1,16:$V2,29:$V3,45:[1,223],46:224,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{10:225,15:$V1,16:$V2,29:$V3,45:[1,226],46:227,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vz,[2,44],{31:[1,228]}),o($Vz,[2,45],{31:[1,229]}),{22:[1,230]},o($V$,[2,23]),o($V$,[2,24]),o($V$,[2,25]),o($VD,[2,57]),o($Vf,[2,21]),o($Vf,[2,10]),{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:231,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VZ,[2,74]),{18:[1,232],79:$Vg,80:$Vh},{18:[1,233],79:$Vg,80:$Vh},{18:[1,234],79:$Vg,80:$Vh},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,235],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{18:[1,236]},{15:[1,237]},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,238],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VJ,[2,28],{79:$Vg,80:$Vh}),o($VJ,[2,31],{79:$Vg,80:$Vh}),o($Vz,[2,48]),{33:$V01,45:[1,239]},o($V11,[2,60],{79:$Vg,80:$Vh}),o($Vz,[2,49]),{33:$V01,45:[1,241]},{44:[1,242]},{44:[1,243]},{15:$V_,24:207,26:$VE,27:$VF,28:$VG,29:$VH,34:244},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,245],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{19:[1,246]},{19:[1,247]},{19:[1,248]},{72:[1,249]},{19:[1,250]},{31:[1,251],76:[1,252],77:[1,253]},o($Vf,[2,13]),o($Vz,[2,52]),{10:254,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($Vz,[2,53]),{10:225,15:$V1,16:$V2,29:$V3,46:255,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{10:225,15:$V1,16:$V2,29:$V3,46:256,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($V$,[2,22]),o($Vf,[2,11]),{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:257,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:258,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{62:259,65:260,66:$V21},{16:[1,262]},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:263,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{10:264,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{15:[1,265]},{15:[1,266]},o($V11,[2,59],{79:$Vg,80:$Vh}),{33:$V01,45:[1,267]},{33:$V01,45:[1,268]},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,269],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,270],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{21:[1,272],63:[1,271],65:273,66:$V21},o($V31,[2,88]),{22:[2,91],67:274,68:[1,275],69:[1,276],70:[1,277],71:[1,278]},{10:279,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,280],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{11:[1,281],79:$Vg,80:$Vh},{18:[2,100]},{18:[2,101]},o($Vz,[2,50]),o($Vz,[2,51]),o($VZ,[2,80],{58:282,60:284,59:[1,283]}),o($VZ,[2,96]),{22:[1,285]},o($VZ,[2,86]),o($V31,[2,87]),{22:[1,286]},{22:[2,92]},{22:[2,93]},{22:[2,94]},{22:[2,95]},{18:[1,287],79:$Vg,80:$Vh},o($VZ,[2,98]),{10:288,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VZ,[2,79],{60:290,59:[1,289]}),{19:[1,291],57:$V41},o($V51,[2,82]),{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:293,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:294,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{11:[1,295]},{11:[1,296],79:$Vg,80:$Vh},{19:[1,297],57:$V41},o($V51,[2,81]),{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:298,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{16:[1,299]},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,301],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,64:[1,300],68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($V31,[2,90],{82:14,78:16,83:17,102:18,89:19,92:21,95:22,96:23,50:146,51:147,52:148,13:149,53:150,54:151,9:152,10:154,49:183,2:$VO,15:$V1,16:$V2,29:$V3,47:$V5,48:$V6,55:$VP,56:$VQ,57:$VR,61:$VS,64:[1,302],68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,81:$Vb,90:$Vc,99:$Vd,100:$Ve}),o($VZ,[2,97]),{10:303,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:304,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,305],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{10:306,15:$V1,16:$V2,29:$V3,68:$V7,69:$V8,70:$V9,71:$Va,78:45,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{11:[1,307]},o($VZ,[2,85]),{11:[1,308]},{18:[2,99],79:$Vg,80:$Vh},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,309],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($VZ,[2,78]),{18:[1,310],79:$Vg,80:$Vh},{21:[1,311]},o($V31,[2,89]),o($VZ,[2,77]),{19:[1,312]},o($VZ,[2,84]),{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,20:313,29:$V3,47:$V5,48:$V6,49:145,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},{2:$VO,9:152,10:154,13:149,15:$V1,16:$V2,21:[1,314],29:$V3,47:$V5,48:$V6,49:183,50:146,51:147,52:148,53:150,54:151,55:$VP,56:$VQ,57:$VR,61:$VS,68:$V7,69:$V8,70:$V9,71:$Va,72:$VT,73:$VU,74:$VV,78:16,81:$Vb,82:14,83:17,89:19,90:$Vc,92:21,95:22,96:23,99:$Vd,100:$Ve,102:18},o($V51,[2,83])],
defaultActions: {33:[2,1],163:[2,14],164:[2,15],165:[2,16],265:[2,100],266:[2,101],275:[2,92],276:[2,93],277:[2,94],278:[2,95]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {NodoArbol, DrawArbol} = require('../ast/ast');

    var id = 0;
    var raiz = new NodoArbol("s", -1, null);

    function inc(){
        id++;
        return id;
    }

    function parseAST(entrada){
        this.parse(entrada);
        var grafica = new DrawArbol(raiz);
        grafica.createArbol();
    }

    exports.parseAST = parseAST;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 69;
break;
case 4:return 70;
break;
case 5:return 68;
break;
case 6:return 71;
break;
case 7:return 91;
break;
case 8:return 93;
break;
case 9:return 90;
break;
case 10:return 88;
break;
case 11:return 16;
break;
case 12:return 18;
break;
case 13:return 'tXor';
break;
case 14:return 80;
break;
case 15:return 79;
break;
case 16:return 81;
break;
case 17:return 97;
break;
case 18:return 98;
break;
case 19:return 33;
break;
case 20:return 101;
break;
case 21:return 11;
break;
case 22:return 22;
break;
case 23:return 44;
break;
case 24:return 45;
break;
case 25:return 19;
break;
case 26:return 21;
break;
case 27:return 31;
break;
case 28:return 86;
break;
case 29:return 87;
break;
case 30:return 36;
break;
case 31:return 43;
break;
case 32:return 42;
break;
case 33:return 84;
break;
case 34:return 85;
break;
case 35:return  'tfunction';
break;
case 36:return  'tbreak';
break;
case 37:return  'tcontinue';
break;
case 38:return  'treturn';
break;
case 39:return  'tif';
break;
case 40:return  'tswitch';
break;
case 41:return  'tdefault';
break;
case 42:return  'telse';
break;
case 43:return  'tcase';
break;
case 44:return  'twhile';
break;
case 45:return  'tdo';
break;
case 46:return  'tfor';
break;
case 47:return  'tin';
break;
case 48:return  'tlet';
break;
case 49:return  'tconst';
break;
case 50:return  'tpop';
break;
case 51:return  'tpush';
break;
case 52:return  'tlenght';
break;
case 53:return  'ttype';
break;
case 54:return  'tVoid';
break;
case 55:return  'tBoolean:';
break;
case 56:return  'tNumber';
break;
case 57:return  'tString';
break;
case 58:return  'tArray';
break;
case 59:return  'tin';
break;
case 60:return  'tof';
break;
case 61:return  'tnull';
break;
case 62:return  'ttrue';
break;
case 63:return  'tfalse';
break;
case 64:return 15;
break;
case 65:return 5
break;
case 66:return 'INVALID'
break;
case 67:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9])+\.([0-9])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:'([^\\\"]|\\.)*')/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\^)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:\?)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:function)/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:if)/,/^(?:switch)/,/^(?:default)/,/^(?:else)/,/^(?:case)/,/^(?:while)/,/^(?:do)/,/^(?:for)/,/^(?:in)/,/^(?:let)/,/^(?:const)/,/^(?:pop)/,/^(?:push)/,/^(?:lenght)/,/^(?:type)/,/^(?:void)/,/^(?:boolean:)/,/^(?:number)/,/^(?:string)/,/^(?:Array)/,/^(?:in)/,/^(?:of)/,/^(?:null)/,/^(?:true)/,/^(?:false)/,/^(?:[a-zA-Z_][_a-zA-Z0-9ñÑ]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}